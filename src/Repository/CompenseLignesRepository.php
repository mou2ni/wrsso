<?php

namespace App\Repository;

use App\Entity\CompenseLignes;
use App\Entity\Compenses;
use App\Entity\SystemTransfert;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * ClientsRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */

class CompenseLignesRepository extends ServiceEntityRepository
{
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, CompenseLignes::class);
    }
    
    public function listing(\DateTime $dateDebut, \DateTime $dateFin, $offset=0,$limit = 50)
    {
        return $qb = $this->createQueryBuilder('cl')
            ->select('c.id as cId, c.dateFin as dateFin, SUM(cl.mReceptionAttendu - cl.mEnvoiAttendu) as mAttendu, SUM(cl.mReceptionCompense - cl.mEnvoiCompense) as mCompense')
            ->innerJoin('cl.compense','c', 'WITH', 'cl.compense=c.id')
            ->where('c.dateFin >=?1')->setParameter(1,$dateDebut)
            ->andWhere('c.dateFin<=?2')->setParameter(2, $dateFin)
            ->groupBy('c.id')
            ->orderBy('c.dateFin', 'ASC')
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult()
            ;
        //$pag = new Paginator($qb);

        //return $pag;
    }

    public function updateCompenseLignes($compense, $systemTransfert, $mEnvoiAttendu, $mReceptionAttendu ){

        $qb=$this->createQueryBuilder('cl');
        $qb ->update()
            ->set('cl.mEnvoiAttendu',$qb->expr()->literal($mEnvoiAttendu))
            ->set('cl.mReceptionAttendu',$qb->expr()->literal($mReceptionAttendu))
            ->where('cl.compense= ?1')->setParameter(1,$compense)
            ->andWhere('cl.systemTransfert= ?2')->setParameter(2,$systemTransfert);

        return $qb->getQuery()->execute();
    }

    public function increaseDecreaseCompenseLignes($compense, $systemTransfert, $mEnvoiAttendu, $mReceptionAttendu ){
        $qb=$this->createQueryBuilder('cl');
        $em=$this->getEntityManager();
        $req='UPDATE compense_lignes SET m_envoi_attendu = m_envoi_attendu+'.$qb->expr()->literal($mEnvoiAttendu).', m_reception_attendu = m_reception_attendu+'.$qb->expr()->literal($mReceptionAttendu).' WHERE compense_id = '.$qb->expr()->literal($compense).' AND system_transfert_id ='.$qb->expr()->literal($systemTransfert);
        try {
            $stmt = $em->getConnection()->prepare($req);
            $stmt->execute([]);
        } catch (DBALException $e) {
        }
        //$stmt->bindParam(1, '2019/01/01');
        //$stmt->bindValue(2, '2019/01/31');
        //$stmt->bindParam(1,$dateDeb);
        //$stmt->bindParam(2,$dateFin);

    }


}
