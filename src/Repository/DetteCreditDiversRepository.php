<?php

namespace App\Repository;

use App\Entity\Caisses;
use App\Entity\DetteCreditDivers;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use App\Entity\JourneeCaisses;

/**
 * DetteCreditDiversRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class DetteCreditDiversRepository extends EntityRepository
{
    public function liste($limit = 10)
    {
        return $this->createQueryBuilder('dcd')
            ->where('dcd.statut=:dec')
            ->orWhere('dcd.statut=:cec')
            ->setParameter('cec',DetteCreditDivers::CREDIT_EN_COUR)
            ->setParameter('dec',DetteCreditDivers::DETTE_EN_COUR)
            ->orderBy('dcd.id', 'ASC')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult()
            ;
    }

    public function getTotalDettesCredits(Caisses $caisse){
        $qb = $this->createQueryBuilder('dc');

        try {
            return $qb
                ->select('sum(dc.mDette) as dette,sum(dc.mCredit) as credit ')
                ->where($qb->expr()->eq('dc.caisse', ':caisse'))
                ->andWhere($qb->expr()->orX($qb->expr()->eq('dc.statut', ':credit'), $qb->expr()->eq('dc.statut', ':dette')))
                ->setParameters(['caisse' => $caisse, 'credit' => DetteCreditDivers::CREDIT_EN_COUR, 'dette' => DetteCreditDivers::DETTE_EN_COUR])
                ->getQuery()
                ->getOneOrNullResult();
        } catch (NonUniqueResultException $e) {
        }
    }

    public function getDettesEncours(JourneeCaisses $journeeCaisseActive){
        $qb = $this->createQueryBuilder('dc');
        
        return $qb
            ->where($qb->expr()->eq('dc.journeeCaisseActive', ':journeeCaisseActive'))
            ->andWhere($qb->expr()->eq('dc.statut', ':dette'))
            ->setParameters(['journeeCaisseActive' => $journeeCaisseActive, 'dette' => DetteCreditDivers::DETTE_EN_COUR])
            ->getQuery()
            ->getResult();
    }

    public function getCreditsEncours(JourneeCaisses $journeeCaisseActive){
        $qb = $this->createQueryBuilder('dc');

        return $qb
            ->where($qb->expr()->eq('dc.journeeCaisseActive', ':journeeCaisseActive'))
            ->andWhere($qb->expr()->eq('dc.statut', ':credit'))
            ->setParameters(['journeeCaisseActive' => $journeeCaisseActive, 'credit' => DetteCreditDivers::CREDIT_EN_COUR])
            ->getQuery()
            ->getResult();
    }

    public function reaffecterDetteCredit(JourneeCaisses $journeeCaisseOrigine, JourneeCaisses $journeeCaisseDestination){

        $qb = $this->createQueryBuilder('dc');
        return $qb->update(DetteCreditDivers::class, 'dc')
            ->set('dc.journeeCaisse', ':journeeCaisseDestination')
            ->where($qb->expr()->eq('dc.journeeCaisse', ':journeeCaisseOrigine'))
            ->andWhere($qb->expr()->orX($qb->expr()->eq('dc.statut', ':credit'), $qb->expr()->eq('dc.statut', ':dette')))
            ->setParameters(['journeeCaisseDestination' => $journeeCaisseDestination->getId(),'journeeCaisseOrigine'=> $journeeCaisseOrigine->getId()
                ,'credit' => DetteCreditDivers::CREDIT_EN_COUR, 'dette' => DetteCreditDivers::DETTE_EN_COUR])
            ->getQuery()
            ->execute();
    }


}
