<?php

namespace App\Repository;

use App\Entity\Comptes;
use App\Entity\RecetteDepenses;
use App\Entity\TypeOperationComptables;
use App\Entity\Utilisateurs;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\QueryBuilder;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * RecetteDepensesRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class RecetteDepensesRepository extends ServiceEntityRepository
{
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, RecetteDepenses::class);
    }

    /**
     * @return QueryBuilder
     */
    private function qbRecetteDepenses(){
        return $qb = $this->createQueryBuilder('rd')
            ->select('rd.id as id, rd.dateOperation as dateOperation, cg.numCompte as compteGestion, ct.numCompte as compteTier, rd.libelle as libelle, rd.numDocumentCompta as numDocumentCompta, jc.statut as statutJc
            , u.nom as nomUtilisateur, u.prenom as prenomUtilisateur, rd.mRecette as mRecette, rd.mDepense as mDepense, rd.statut as statut, toc.libelle as typeOperationComptable, IDENTITY(rd.transaction) as transaction, IDENTITY(rd.utilisateur) as utilisateur')
            ->leftJoin('rd.typeOperationComptable','toc', 'WITH', 'rd.typeOperationComptable=toc.id')
            ->leftJoin('rd.utilisateur','u', 'WITH', 'rd.utilisateur= u.id')
            ->leftJoin('rd.compteGestion','cg', 'WITH', 'rd.compteGestion= cg.id')
            ->leftJoin('rd.compteTier','ct', 'WITH', 'rd.compteTier= ct.id')
            ->leftJoin('rd.journeeCaisse','jc', 'WITH', 'rd.journeeCaisse= jc.id')
            ->orderBy('rd.dateOperation','DESC');
        ;

    }

    public function findRecetteDepenses()
    {
        /*$qb = $this->createQueryBuilder('rd')
            ->where('rd.statut <> :annule')->setParameter('annule', RecetteDepenses::STAT_ANNULE)
            ->addOrderBy('rd.id', 'DESC');*/
        $qb=$this->qbRecetteDepenses();
         return $qb->getQuery()
            ->getResult();
    }

    public function findListingRecetteDepenses(\DateTime $dateDebut=null, \DateTime $dateFin=null, $compteTier=null, $compteGestion=null, $utilisateur=null, $typeOperationComptable=null, $statut=null, $journeeCaisse=null){

        $qb=$this->qbRecetteDepenses();

        if ($dateDebut)$qb->where('rd.dateOperation>=:dateDebut')->setParameter('dateDebut',$dateDebut);
        if ($dateFin) $qb->andWhere('rd.dateOperation<=:dateFin')->setParameter('dateFin',$dateFin);
        if ($compteTier) $qb->andWhere('rd.compteTier=:compteTier')->setParameter('compteTier',$compteTier);
        if ($compteGestion) $qb->andWhere('rd.compteGestion=:compteGestion')->setParameter('compteGestion',$compteGestion);
        if ($utilisateur) $qb->andWhere('rd.utilisateur=:utilisateur')->setParameter('utilisateur',$utilisateur);
        if ($typeOperationComptable) $qb->andWhere('rd.typeOperationComptable=:typeOperationComptable')->setParameter('typeOperationComptable',$typeOperationComptable);
        if ($journeeCaisse) $qb->andWhere('rd.journeeCaisse=:journeeCaisse')->setParameter('journeeCaisse',$journeeCaisse);
        if ($statut) $qb->andWhere('rd.statut like \''.$statut.'%\'');//->setParameter('statut',$statut);

        return $qb->getQuery()->getResult();
    }

    public function getSumRecetteDepensesParAgence(\DateTime $debutMois, \DateTime $finMois){
        //$moisPrecedentDebut= new \DateTime( );
        //$cetteAnnee=$date->format('Y');
        //$ceMois=$date->format('m');
        //$moisSuivant=$ceMois+1;
        //$moisDebut= new \DateTime($cetteAnnee.'-'.$ceMois.'-01');
        //$moisFin= new \DateTime($cetteAnnee.'-'.$moisSuivant.'-00');

        /*$moisDebut=new \DateTime($date);
        $moisDebut->modify('first day of month');
        $moisFin=new \DateTime($date);
        $moisFin->modify('last day of month'); ;


        
        $moisPrecedentDebut=new \DateTime($date);
        $moisPrecedentDebut->modify('first day of previous month');
        $moisPrecedentFin=new \DateTime($date);
        $moisPrecedentFin->modify('last day of previous month');*/


        $qb = $this->createQueryBuilder('rd')
        ->innerJoin('rd.agence','a');

        /*,SUM(CASE WHEN rd.dateOperation>=:moisPrecedentDebut and rd.dateOperation<=:moisPrecedentFin THEN rd.mRecette ELSE 0 END) as MPRecette
            ,SUM(CASE WHEN rd.dateOperation>=:moisPrecedentDebut and rd.dateOperation<=:moisPrecedentFin THEN rd.mDepense ELSE 0 END) as MPDepense
           */

       return $qb->select('a.code as agence
            ,SUM(CASE WHEN rd.dateOperation>=:debutMois and rd.dateOperation<=:finMois THEN rd.mRecette ELSE 0 END) as mRecette
            ,SUM(CASE WHEN rd.dateOperation>=:debutMois and rd.dateOperation<=:finMois THEN rd.mDepense ELSE 0 END) as mDepense
         ')
            //->setParameter('moisPrecedentDebut', $moisPrecedentDebut)
            //->setParameter('moisPrecedentFin', $moisPrecedentFin)
            ->setParameter('debutMois', $debutMois)
            ->setParameter('finMois', $finMois)
            ->groupBy('a.code')
            ->orderBy('a.code')
            ->getQuery()->getResult();
            
    }
}
